---
title: "R code for simulation results"
---


------------------------------------------------------------------------

## 1. Generate simulation
```{r eval=FALSE}
####################################################################################################################################
################################################## Data Simulation #################################################################
##################################### User Specified Differentiate Genus Features ##################################################
####################################################################################################################################
source("SimulateMSeq_V2.R")

load("common_genus.Rdata")


N = 206 #sample size
input.conf <- rnorm(N)
input.err <- rnorm(N)
input.diff.otu.pct = NULL
input.diff.otu.mode = "user_specified"
user_specified_otu = common_genus[1:10]
input.covariate.eff.mean = 0.3

nSim = 200

## WGS simulation
sim_WGS_Genus <- replicate(nSim, list(), simplify = FALSE)

for (i in 1:nSim) {
  sim_WGS_Genus[[i]] <- SimulateMSeqU(
    para = para2, nSam = N, nOTU = nrow(physeq.wgs.genus@otu_table),
    # True signal setting
    diff.otu.pct = input.diff.otu.pct, diff.otu.direct = c("unbalanced"), 
    diff.otu.mode = input.diff.otu.mode,
    user_specified_otu = user_specified_otu ,
    covariate.type = "binary", grp.ratio = 1,
    covariate.eff.mean = input.covariate.eff.mean, covariate.eff.sd = 0,
    # Confounder signal setting
    confounder.type = "none", conf.cov.cor = 0.6,
    conf.diff.otu.pct = 0, conf.nondiff.otu.pct = 0,
    confounder.eff.mean = 0, confounder.eff.sd = 0,
    # Depth setting
    depth.mu = 10000, depth.theta = 5, depth.conf.factor = 0,
    cont.conf = input.conf,epsilon = input.err)
}

save(sim_WGS_Genus,file = "SimulationResults/sim_WGS_Genus.Rdata")

## 16S simulation
sim_16S_Genus <- replicate(nSim, list(), simplify = FALSE)

for (i in 1:nSim) {
  sim_16S_Genus[[i]] <- SimulateMSeqU(
    para = para1, nSam = N, nOTU = nrow(physeq.16s.genus@otu_table),
    # True signal setting
    diff.otu.pct = input.diff.otu.pct, diff.otu.direct = c("unbalanced"), 
    diff.otu.mode = input.diff.otu.mode,
    user_specified_otu = user_specified_otu ,
    covariate.type = "binary", grp.ratio = 1,
    covariate.eff.mean = input.covariate.eff.mean, covariate.eff.sd = 0,
    # Confounder signal setting
    confounder.type = "none", conf.cov.cor = 0.6,
    conf.diff.otu.pct = 0, conf.nondiff.otu.pct = 0,
    confounder.eff.mean = 0, confounder.eff.sd = 0,
    # Depth setting
    depth.mu = 10000, depth.theta = 5, depth.conf.factor = 0,
    cont.conf = input.conf,epsilon = input.err)
}
```

## 2. Global power checking

```{r eval=FALSE}
###########################################################################
########################### MiRKAT Integration ############################
###########################################################################
library(MiRKAT)
library(vegan)

load("SimulationResults/sim_WGS_Genus.Rdata")
load("SimulationResults/sim_16S_Genus.Rdata")

nSim = 200
result.list = lapply(c(1:nSim), MiRKAT_Test)
results.df = data.frame(do.call(rbind,result.list))
colMeans(results.df)

###########################
###### Visualization ######
###########################
library(readxl)
MiRKAT_Power = read_excel("Simulation_V2_Results/MiRKAT Results.xlsx")
MiRKAT_Power$Platform = factor(MiRKAT_Power$Platform, levels = c("Multiple", "WGS", "16s"))
MiRKAT_Power$Diff_OTU_Order= factor(MiRKAT_Power$Diff_OTU_Order, levels = unique(MiRKAT_Power$Diff_OTU_Order))

plot.MiRKAT = ggplot(MiRKAT_Power, 
                     aes_string(x = "Diff_OTU_Order", y = "BC_MiRKAT_Power", 
                                color = "Platform", group = "Platform")) +
  geom_line() +
  geom_point() +
  ylim(0,1) +
  labs(title = "MiRKAT", y = "Power",x = "Differenciate OTU Abundance Order")+
  scale_color_manual(values = c("WGS" = "red", "16s" = "blue", "Multiple" = "green"))

##############################################################################################################################
########################################### Global Results checking ##########################################################
############################### User Specified Differentiate Genus Features ##################################################
##############################################################################################################################
rm(list = ls())


library(vegan)
library(phyloseq)
library(microbiome)

source("SimulateMSeq.R")

load("SimulationResults/sim_WGS_Genus.Rdata")
load("SimulationResults/sim_16S_Genus.Rdata")

sim.sum = sapply(sim_WGS_Genus, Global_Test)

sim.sum = data.frame(t(sim.sum))
colnames(sim.sum) = c("Shannon_p", "Inv_Simpson_P")
colnames(sim.sum) = c("Shannon_p", "Inv_Simpson_P", "Bray_Curtis_P")
p_thresh = 0.05
colMeans(ifelse(sim.sum < p_thresh,1,0))

##########################
##### Visualization ######
##########################
library(ggplot2)
library(gridExtra)

results = read.csv("Simulation_V2_Results/Global_Simulation_Results.csv")
results$Differentiated_Feature_Number = factor(results$Differentiated_Feature_Number, levels = unique(results$Differentiated_Feature_Number))

plot1 = ggplot(results, aes(x = Differentiated_Feature_Number, y = Shannon_Power, color = Platform,group = Platform)) +
  geom_line() +
  geom_point() +
  ylim(0,1) +
  labs(title = "Shannon Index", y = "Power",x = "Differenciate OTU Abundance Order")+
  scale_color_manual(values = c("WGS" = "red", "SixteenS" = "blue"))

plot2 =  ggplot(results, aes(x = Differentiated_Feature_Number, y = Bray_Power, color = Platform,group = Platform)) +
  geom_line() +
  geom_point() +
  ylim(0,1) +
  labs(title = "Bray-Curtis Distance",y = "Power", x = "Differenciate OTU Abundance Order")+
  scale_color_manual(values = c("WGS" = "red", "SixteenS" = "blue"))


combined_plots = plot1 +plot2 +plot.MiRKAT +
  plot_layout(guides = "collect")
ggsave("Plots/Global_Power_w_Specified_Genus.png",combined_plots,width = 18,height = 8)
```

## 3. Univariate power analysis
```{r eval=FALSE}
###########################################################################################################################
########################################### Univaraite ####################################################################
############################ User Specified Differentiate Genus Features ##################################################
###########################################################################################################################
library(DESeq2)
library(ANCOMBC)
library(mltools)


sim_Rate = lapply(sim_WGS_Genus,TP_Rate)

sim_Rate_df = do.call(rbind,sim_Rate)

colnames(sim_Rate_df) = c("DEseq2_TPR","DEseq2_TNR",  "DEseq2_FDR", "DEseq2_MCC",
                          "ANCOMBC_TPR", "ANCOMBC_TNR","ANCOMBC_FDR","ANCOMBC_MCC",
                          "ANCOMBC2_TPR", "ANCOMBC2_TNR","ANCOMBC2_FDR", "ANCOMBC2_MCC",
                          "Wilcoxon_TPR",  "Wilcoxon_TNR", "Wilcoxon_FDR","Wilcoxon_MCC")
```

